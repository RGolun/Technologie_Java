package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Stadion;


public class StadionManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableStadion = 
			"CREATE TABLE Stadion(id bigint GENERATED BY DEFAULT AS IDENTITY, nazwa varchar(40), miasto varchar(40), "
			+ "Mecz integer, FOREIGN KEY (Mecz) REFERENCES PUBLIC.Mecz(id) ON DELETE CASCADE ON UPDATE CASCADE)";
	private String dropTableStadion = "DROP TABLE Stadion";
			
	private PreparedStatement addStadionStmt;
	private PreparedStatement editStadionStmt;
	private PreparedStatement deleteStadionStmt;
	private PreparedStatement deleteAllStadionyStmt;
	private PreparedStatement getStadionStmt;
	private PreparedStatement getAllStadionyStmt;	

	private Statement statement;

	public StadionManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Stadion".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
			{
				statement.executeUpdate(createTableStadion);
			}
			

			addStadionStmt = connection
					.prepareStatement("INSERT INTO Stadion (nazwa, miasto, Mecz) VALUES (?, ?, ?)");
			editStadionStmt = connection
					.prepareStatement("UPDATE Stadion SET nazwa=?, miasto=?, Mecz=?");
			deleteStadionStmt = connection
					.prepareStatement("DELETE FROM Stadion where id=?");
			deleteAllStadionyStmt = connection
					.prepareStatement("DELETE FROM Stadion");
			getAllStadionyStmt = connection
					.prepareStatement("SELECT id, nazwa, miasto, Mecz FROM Stadion");
			getStadionStmt = connection
					.prepareStatement("SELECT id, nazwa, miasto, Mecz FROM Stadion where id=?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	public int deleteStadion(long id) {
		int count = 0;
		try {
			deleteStadionStmt.setLong(1, id);
			count = deleteStadionStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	void clearStadiony() {
		try {
			deleteAllStadionyStmt.executeUpdate();
			
			statement.executeUpdate(dropTableStadion);
			statement.executeUpdate(createTableStadion);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addStadion(Stadion Stadion) {
		int count = 0;
		
		try {
			addStadionStmt.setString(1, Stadion.getNazwa());
			addStadionStmt.setString(2, Stadion.getmiasto());
			addStadionStmt.setInt(3, Stadion.getmecz());
			
			count = addStadionStmt.executeUpdate();
			

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public int editStadion(Stadion Stadion) {
		int count = 0;
		
		try {
			editStadionStmt.setString(1, Stadion.getNazwa());
			editStadionStmt.setString(2, Stadion.getmiasto());
			editStadionStmt.setInt(3, Stadion.getmecz());
			
			count = editStadionStmt.executeUpdate();
			

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public Stadion getStadion(long id) {
		Stadion p = new Stadion();

		try {
			getStadionStmt.setLong(1, id);
			ResultSet rs = getStadionStmt.executeQuery();
			while (rs.next()) {
				
				p.setId(rs.getInt("id"));
				p.setNazwa(rs.getString("nazwa"));
				p.setmiasto(rs.getString("miasto"));
				p.setmecz(rs.getInt("Mecz"));
			}

		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
		return p;
	}

		
	
	public List<Stadion> getAllStadiony() {
		List<Stadion> Stadiony = new ArrayList<Stadion>();

		try {
			ResultSet rs = getAllStadionyStmt.executeQuery();

			while (rs.next()) {
				Stadion p = new Stadion();
				p.setId(rs.getInt("id"));
				p.setNazwa(rs.getString("nazwa"));
				p.setmiasto(rs.getString("miasto"));
				p.setmecz(rs.getInt("Mecz"));
				Stadiony.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return Stadiony;
	}

	public void wypiszStadion(Stadion Stadion) {
			
		System.out.print("\n/////\n" +
				"Id = " + Stadion.getId() +
				" nazwa = " + Stadion.getNazwa() +
				" miasto = " + Stadion.getmiasto() +
				" Mecz_Id = " + Stadion.getmecz() +
				"\n/////\n" 
				);	

	}
	
}
